{"name":"Chess.js","tagline":"Chess Board API in JavaScript","body":"# chess.js\r\n\r\nChessboard manipulation in JavaScript. Used in [JoahG/chs.xyz](https://github.com/JoahG/chs.xyz).\r\n\r\n## Dependencies\r\n\r\nchess.js has no dependencies. It works out of the box with 0 configuration.\r\n\r\n## Initialization\r\n\r\nAfter loading chess.js into your project, simply create a new `Board` object by assigning it to a variable:\r\n\r\n```javascript\r\n  var board = new Board();\r\n```\r\n\r\nThe `Board` object constructor takes a single optional parameter, `move_callback`, which will be called every time a move is made in the game (could be used to push data to a server, etc.). The `move_callback` function takes a single parameter, which is a [Log Object](#log-objects);\r\n\r\n```javascript\r\n  var board = new Board(function(move){\r\n    // Do something here\r\n  })\r\n```\r\n\r\n## Attributes\r\n\r\nThe created `Board` object will contain several attributes. Here is a description of each of them:\r\n\r\n  - `board.spaces`: will be an `Array` of [Space Objects](#space-objects);\r\n  - `board.turn`: will be the current player turn in a `String`.\r\n  - `board.playing_with_fairies`: will be a `Boolean` turning on/off playing with [fairies](http://en.wikipedia.org/wiki/Fairy_chess_piece).\r\n  - `board.log`: will be an `Array` of [Log Objects](#log-objects);\r\n  - `board.move_callback`: will be the `move_callback` function included on initialization.\r\n\r\n## Methods\r\n\r\nThe created `Board` object will also contain several methods for manipulating the board. They are profiled as follows:\r\n\r\n  - `board.space_at(coordinates)`: will return a [Space Object](#space-objects) existing at the inputted `coordinates` (in the form of `'HV'` - aka `'b3'`).\r\n    - returns: [Space Object](#space-objects) existing at the inputted `coordinates`\r\n    - parameters: (1)\r\n      - `coordinates` (`String`): desired coordinates in the form of `'HV'` - aka `'b3'`\r\n  - `board.update_guards()`: will update all the pieces' spaces they are guarding.\r\n    - returns: `undefined`\r\n    - parameters: (0)\r\n  - `board.kings_in_check(army)`: will determine whether or not the King is in check.\r\n    - returns: \r\n      - with inputted `army`\r\n        - `Boolean` (whether or not `army`'s king is in check)\r\n      - without inputted `army`\r\n        - `Array` consisting of two `Boolean`s (`[white_in_check, black_in_check]`).\r\n    - parameters: (1)\r\n      - `army` (`String`): will restrict the return to the inputted army **optional**\r\n  - `board.is_checkmate(army)`: will determine whether or not an army is in checkmate.\r\n    - returns: `Boolean` (whether or not `army` is in checkmate)\r\n    - parameters: (1)\r\n      - `army` (`String`): which army to check for checkmate\r\n  - `board.next(str)`: will increment the inputted `str` by one value (aka input `'b'` will return `'c'`)\r\n    - returns: `String`\r\n    - parameters: (1)\r\n      - `str` (`String`): string to be incremented.\r\n  - `board.prev(str)`: will decrement the inputted `str` by one value (aka input `'b'` will return `'a'`)\r\n    - returns: `String`\r\n    - parameters: (1)\r\n      - `str` (`String`): string to be decremented.\r\n  - `board.restore(Board)`: will restore the current `Board` object to the inputted `Board` state.\r\n    - returns: `undefined`\r\n    - parameters: (1)\r\n      - `Board` (`Object`): board state to be restored\r\n  - `board.export()`: will prep the board for exporting\r\n    - returns: `String` (`JSON` `stringified` Board object)\r\n    - parameters: (0)\r\n\r\n## Other Object Types\r\n\r\nThere are also two Object types that are children of the `Board` object constructor. They are used and included within the `Board` methods.\r\n\r\n### Space Objects\r\n\r\nThe `Space` objects will represent each square (or \"space\") on the board. They are contained in `board.spaces`.\r\n\r\n#### Attributes\r\n\r\nThe `Space` objects have a few attributes, which are as follows:\r\n\r\n  - `space.hor`: `String` (`space`'s horizontal position (aka `'d'`))\r\n  - `space.ver`: `String` (`space`'s vertical position (aka `'4'`))\r\n  - `space.is_occupied`: `false` if unoccupied, otherwise a [Piece Object](#piece-objects)\r\n  - `space.is_guarded`: `Array` of pieces guarding the space.\r\n\r\n#### Methods\r\n\r\nThe `Space` objects also have a single method, which is the following:\r\n\r\n  - `space.guarded_by(army)`: returns whether or not an army is guarding a space\r\n    - returns: `Boolean`\r\n    - parameters: (1)\r\n      - `army` (`String`)\r\n\r\n### Piece Objects\r\n\r\nThe `Piece` objects represent the individual pieces on the board. \r\n\r\n#### Attributes\r\n\r\nThe `Piece` objects have a few attributes, which are as follows:\r\n\r\n  - `piece.type`: `String` type of piece (aka `'knight'`)\r\n  - `piece.space`: `String` coordinates of piece (aka `'b2'`)\r\n  - `piece.army`: `String` piece's army (aka `'white'`)\r\n\r\n#### Methods\r\n\r\nThe `Piece` objects also have several methods:\r\n\r\n  - `piece.possible_moves()`: returns all the possible moves for a given piece\r\n    - returns `Array`:\r\n      - `Array[0]`: All the possible *moves* for the piece (`Array` of coordinates)\r\n      - `Array[1]`: All the possible *captures* for the piece (`Array` of coordinates)\r\n      - `Array[2]`: All the *moves* and *captures* combined (`Array` of coordinates)\r\n      - `Array[3]`: All the spaces the piece is guarding (`Array` of coordinates)\r\n    - parameters: (0)\r\n  - `piece.can_take(other_piece)`: returns `Boolean` whether or not `piece` can take `other_piece`\r\n    - returns: `Boolean`\r\n    - parameters: (1)\r\n      - `other_piece` (`Object`): [Piece Object](#piece-objects)\r\n  - `piece.takes(space, other_piece, is_en_passant)`: `piece` takes `other_piece`\r\n    - returns: `Boolean` (whether or not take was successful)\r\n    - parameters: (3)\r\n      - `space` (`String`): coordinates of capture\r\n      - `other_piece` (`Object`): [Piece Object](#piece-objects)\r\n      - `is_en_passant` (`Boolean`): whether or not capture is [En Passant](http://en.wikipedia.org/wiki/En_passant)\r\n  - `piece.can_move()`: \r\n    - returns: `Boolean` (whether or not piece can move)\r\n    - parameters: (0)\r\n  - `piece.can_move_to(coordinate)`: \r\n    - returns: `Boolean` (whether or not piece can move to `coordinate`)\r\n    - parameters: (1)\r\n      - `coordinate` (`String`): `String` coordinates of space (aka `'e1'`)\r\n  - `piece.move_to(coordinate, is_cap, is_en_passant)`: move `piece` to `coordinate`\r\n    - returns: `Boolean` (whether or not move was successful)\r\n    - parameters: (3)\r\n      - `coordinate` (`String`): coordinate to move `piece` to.\r\n      - `is_cap` (`Boolean`): whether or not move is capture.\r\n      - `is_en_passant` (`Boolean`): whether or not capture is [En Passant](http://en.wikipedia.org/wiki/En_passant)\r\n  - `piece.can_castle(side)`:\r\n    - returns: `Boolean` (whether or not `piece` can castle to `side`)\r\n    - parameters: (1)\r\n      - `side` (`String`): side to castle to (either `'kingside'` or `'queenside'`)\r\n  - `piece.can_en_passant()`:\r\n    - returns: `Boolean` (whether or not `piece` can move via [En Passant](http://en.wikipedia.org/wiki/En_passant)\r\n    - parameters: (0)\r\n  - `piece.move_is_en_passant(coordinate)`: test whether move would be [En Passant](http://en.wikipedia.org/wiki/En_passant)\r\n    - returns: `Boolean` (whether or not move is [En Passant](http://en.wikipedia.org/wiki/En_passant))\r\n    - parameters: (1)\r\n      - `coordinate` (`String`): coordinate to test\r\n  - `piece.update_guard()`: update a piece's guarded spaces\r\n    - returns: `undefined`\r\n    - parameters: (0)\r\n\r\n### Log Objects\r\n\r\nLog Objects are inserted into the `board.log` array of logged actions.\r\n\r\nEvery log object is an `Array` containing two items:\r\n\r\n  - `Array[0]` (`String`): The action in [Algebraic Chess notation](http://en.wikipedia.org/wiki/Algebraic_notation_(chess))\r\n  - `Array[1]` (`Object`): Object with details of the action, containing the following attributes:\r\n    - `type` (`String`): action type (either `'castle'`, `'move'`, or `'capture'`)\r\n    - `from` (`String`): coordinate of the space the piece is *leaving*\r\n    - `to` (`String`): coordinate of the space to which the piece is *arriving*\r\n    - `piece` (`Object`): [Piece Object](#piece-objects) with piece performing action\r\n    - `cap_piece` (`Object`): (only if `type` is `'capture'`) [Piece Object](#piece-objects) that was taken\r\n    - `check` (`Boolean`): whether or not the action put the other army in check\r\n    - `pawn_promotion` (`Boolean`): whether or not the action produced a Pawn Promotion\r\n    - `old_type` (`String`): (only if `pawn_promotion` is `true`) the `type` of the piece that was changed to `piece` in Pawn Promotion\r\n\r\n\r\n##Contributing\r\n\r\nIf you find a bug, or would like to help out with development, just follow some simple steps:\r\n\r\n  1. [Make an issue.](https://github.com/JoahG/chess.js/issues/new)\r\n  2. [Fork the repo.](https://github.com/JoahG/chess.js/fork)\r\n  3. Make your changes.\r\n  4. Commit and create a pull request.\r\n\r\n##Author\r\n\r\nchess.js is written and maintained by [Joah Gerstenberg](http://www.joahg.com), copyright 2014. All code contained within these files are licensed under an [MIT license](https://github.com/JoahG/chess.js/blob/master/MIT-LICENSE).\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}